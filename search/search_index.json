{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>This is the official documentation of Discord Bot Builder<sup>1</sup>, created with the help of the community.</p> What is Discord Bot Builder? Discord Bot Builder is a piece of software that allows you to develop your own Discord bot using a GUI<sup>2</sup>, available for purchase on Steam.  What is the DBB Discord Server? The DBB Discord Server is the official place for  support<sup>3</sup> as well as sharing community made workspaces<sup>4</sup> and blocks<sup>5</sup>.  If you need any help, please join and make a forum in the designated 'support' channel. <p>Let's Start!</p> <ol> <li> <p>Also Referenced as \"DBB\"\u00a0\u21a9</p> </li> <li> <p>Graphical User Interface\u00a0\u21a9</p> </li> <li> <p>Support is done voluntarily, a member will assist you when they can\u00a0\u21a9</p> </li> <li> <p>Workspaces are the areas in which you build your bot's logic\u00a0\u21a9</p> </li> <li> <p>Blocks are the elements that you place and connect to eachother in order to create the desired functionality\u00a0\u21a9</p> </li> </ol>"},{"location":"basic-actions/","title":"Basic Actions","text":""},{"location":"basic-actions/#basic-actions","title":"Basic Actions","text":"<p>This Page includes some Basic Actions that can be Done within DBB.</p> DM a UserBuild a Prefix Command  DM a Member/User  <p>Directly Connect the Member/User Object to a Channel Input of a Send Message Block!</p> <p></p>  Build a Prefix Command  <p>Prefix Commands Support Deprecated</p> <p>The Support for Prefix Commands was ended, you can still use the Command Event Block, but things like the Owner Filter and Custom Prefix wont work anymore!</p> <p>Please use Slash Commands for better Support and easier handling!</p> You probably know that mostly all bots used things called <code>Prefix Commands</code> before there were <code>Slash Commands</code>, but now there will be a tutorial how to setup a Prefix Command since many people still don't know how to do it. <p></p> Now to build for example that the user needs to add a Argument you can use the <code>Get Message Argument(s)</code> Block. A Check if that Argument exists would also be needed...   If the Block will only have one Argument which contains spaces then you should use the <code>Multiple Arguments</code> Option...   <p></p>"},{"location":"basic-rules/","title":"Basic Rules","text":""},{"location":"basic-rules/#basic-rules","title":"Basic Rules","text":"<p>Discord Bot Builder seems pretty easy at first, but some beginners may find some errors and don't know how to fix them. So here are some Rules that you need to remember when you want to use DBB.</p>"},{"location":"basic-rules/#never-split-actions","title":"Never Split Actions","text":"Wrong Way Correct Way"},{"location":"basic-rules/#block-explaination","title":"Block Explaination","text":"Blocks have special properties which we visualized in this Picture:"},{"location":"buttons/","title":"Buttons","text":""},{"location":"buttons/#buttons","title":"Buttons","text":"<p>This Section will cover how to create a button, multiple buttons and also detect and handle button inputs.</p> This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods  <p>Important</p> <ul> <li>Each Button needs a Custom ID to detect when it was Pressed</li> <li>You can get a Emoji on Windows using Win+.</li> </ul> 1. Creation2. Event Handling3. TestingEditing a Button Slash Command Structure <pre><code>{\n    \"name\": \"buttons\", \n    \"description\": \"Just some buttons\"\n},\n{\n    \"name\": \"button\", \n    \"description\": \"Just a button\"\n}\n</code></pre>"},{"location":"buttons/#create-one-button","title":"Create One Button","text":"This Alignment will Trigger on the Slash Command /buttons and, which will create and send the button with the <code>Send Message/Interaction (Multi)</code> Block."},{"location":"buttons/#create-multiple-buttons","title":"Create Multiple Buttons","text":"We are going to use the same command like the first one and just add more <code>Button (Component)</code> Blocks. In Combination with <code>Create Action Row</code>"},{"location":"buttons/#detect-and-handle-a-button-press","title":"Detect and handle a Button Press","text":"You can use the <code>Interaction [Event]</code> to detect a Button Press using the Custom ID. Also to get the Current Time and Date you use the <code>Create Date</code> Block and using the <code>Format Date</code> Block you can get the Date in a Text Type. To now send a message back to the User that used the Button, you can use the <code>Send Message/Interaction (Multi)</code> Block.   <p>(Ephemeral means only visible to the user)</p> <p> </p>"},{"location":"buttons/#testing-everything","title":"Testing Everything","text":"When you launch the bot you can now use the example command that was created, and with that the 3 Buttons should be sent. When you now click on a Button the message you reply!"},{"location":"buttons/#edit-a-button","title":"Edit a Button","text":"You can also edit a Button, for example when you want to change the Label or the Style."},{"location":"buttons/#example-button-to-edit","title":"Example Button to edit","text":"To edit a Button you need a button that you want to edit, for this we are going to use a slash command which is going to create the button and then reply it to the interaction."},{"location":"buttons/#getting-to-the-edit-button","title":"Getting to the Edit Button","text":"Now you have multiple ways how and when to edit the button, the simplest is to take the Interaction Event Block and then use Get Message Buttons Block to get the Buttons from the Message and then use the Edit Button Row Block to edit the Button of the Message. At the end use the Interaction Update Block to update the Interaction with the New Button and a New Text/Embed."},{"location":"buttons/#how-it-looks-in-discord","title":"How it looks in Discord","text":""},{"location":"buttons/#still-issues-or-questions","title":"Still Issues or Questions?","text":"If you have Issues or any questions you can always ask on the Discord Bot Builder Discord, or send me a DM: <code>xcrafttm</code>!"},{"location":"context/","title":"Context Menu","text":""},{"location":"context/#context-menu","title":"Context Menu","text":"<p>This Section will explain how to create and use Context Menus!</p> This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods  The Idea is pretty straight-forward. Just register them like normal slash commands, then catch them when used, using <code>Interaction Event</code> Blocks and then you can continue like you want:   <p></p> Here is the Copyable version of the JSON Text: <pre><code>{\n    \"name\": \"Translate\",\n    \"type\": 3\n},\n{\n    \"name\": \"Say Hello\",\n    \"type\": 2\n}\n</code></pre>"},{"location":"create-blocks/","title":"Creating Blocks","text":""},{"location":"create-blocks/#creating-blocks","title":"Creating Blocks","text":""},{"location":"create-blocks/#blocks-are-the-action-tools-of-your-bot","title":"Blocks are the Action Tools of your Bot.","text":"They are created with NodeJS and a Basic Structure for <code>name</code>, <code>inputs</code>, <code>options</code>,<code>output</code> and the <code>code</code> Part."},{"location":"create-blocks/#how-to-submit-to-dbb","title":"How to Submit to DBB","text":"It's easy if you want to use them only by yourself just place the JS file in your Bots Blocks Directory and go on. If everything is ok with the file it's getting loaded instant in DBB, without restarting. If you want to make your Block Public send it into the Blocks Channel on the Discord Server."},{"location":"create-blocks/#the-line-types","title":"The Line Types","text":"If you worked with DBB already you know that there are some different Colors for lines. These are to make it easier for you to see what can be connected is the same type of Var and not only for the Style. The different types are: <code>unspecified, undefined, null, object, boolean, number, text, list, date, action</code> We will look at how to use them a little later."},{"location":"create-blocks/#the-basic-structure","title":"The Basic Structure","text":"<pre><code>  module.exports = {\n    name: \"\",\n\n    description: \"\",\n\n    category: \"\",\n\n    auto_execute: false/true,\n    // This will make your Block run at Startup, for Event Blocks\n\n    inputs: [],\n\n    options: [],\n\n    outputs: [],\n\n    code(cache) {\n\n    }\n};\n</code></pre> <p>These are The Inputs and Outputs of your Block showen in DBB-Editor. If you Update something here please restart the DBB-Editor to see it.</p> <pre><code>    inputs/outputs: [\n      {\n        \"id\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"types\": []\n      }\n    ]\n    // types : unspecified, undefined, null, object, boolean, number, text, list, date, action\n</code></pre> <p>In the <code>id</code> field gets the Name of the Variable used in the code section. Please make shure that the IDs are Unique for the File.</p> <p><code>name</code> is the Name how its shown in DBB-Editor itself.</p> <p><code>description</code> is the Text that Pops up if you hover on the Connectionpoint in DBB-Editor. Helpfull to Describe the Types here.</p> <p><code>types</code> is an Array of Types that can be Connected here. If you want only one Type to be connected use <code>[ \"yourtype\" ]</code>. If you need more, use a comma seperated list inside the <code>[]</code> like this <code>[ :  :  \"unspecified\", \"undefined\", \"null\", \"object\" ]</code>.</p> <p>The <code>inputs</code> field is an Array of Objects. That mean you can add as many Inputs you need by cloning the Object and add it again. To make it valid, between the Objects needs to be a <code>,</code>. That's for all fields from type Array or Object!!!</p> <p>Example:</p> <pre><code>      inputs: [\n        {\n            \"id\": \"action\",\n            \"name\": \"Action\",\n            \"description\": \"Acceptable Types: Action\\n\\nDescription: Executes this block.\",\n            \"types\": [\"action\"]\n        },\n        {\n            \"id\": \"value\",\n            \"name\": \"Value\",\n            \"description\": \"Acceptable Types: Unspecified, Undefined, Null, Object, Boolean, Number, Text, List\\n\\nDescription: \",\n            \"types\": [\"unspecified\", \"undefined\", \"null\", \"object\", \"boolean\", \"number\", \"text\", \"list\"]\n        }\n      ]\n\n      ...\n\n      outputs: [\n        {\n            \"id\": \"action\",\n            \"name\": \"Action\",\n            \"description\": \"Type: Action\\n\\nDescription: Executes blocks.\",\n            \"types\": [\"action\"]\n        }\n      ]\n</code></pre> <p>These are the Options of your Block showed in the DBB-Editor. If you Update something here please restart the DBB-Editor to see it.</p>"},{"location":"create-blocks/#1-the-default-structure","title":"1. The default Structure:","text":"This Structure is the Block that get showed in the DBB-Editor, there you can place Stuff like Name, Description, Category and more. Please make sure that you aren't using the same Name for two Blocks!"},{"location":"create-blocks/#2-the-inputs-and-outputs","title":"2. The Inputs and Outputs:","text":""},{"location":"create-blocks/#3-the-options","title":"3. The Options:","text":""},{"location":"create-blocks/#basic-options","title":"Basic Options","text":"<pre><code>    options: [\n      {\n        \"id\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"type\": \"\"\n      }\n    ]\n</code></pre>"},{"location":"create-blocks/#the-option-types","title":"The Option Types","text":"<code>type</code> supports <code>SELECT, TEXT, COLOR, NUMBER</code> By <code>type</code> =&gt; <code>COLOR</code> it will appere the Color-Picker to select a Color. By <code>type</code> =&gt; <code>TEXT</code> or <code>NUMBER</code> a Field to type your Value in shows on the Block in DBB. By <code>type</code> =&gt; <code>SELECT</code> a Dropdown Menu will be shown in DBB. If you use any other then <code>SELECT</code> you are fine with this Options Structure. If using <code>SELECT</code> you need to add the <code>options</code> field to the <code>options</code> Object. The new <code>options</code> filed is an Array of Items. <pre><code>  /** value for code =&gt; */ 1 : \"Option to Select\" /** &lt;= Shown in DBB */\n</code></pre>"},{"location":"create-blocks/#the-options-in-options-array-example","title":"The <code>options</code> in <code>options</code> array Example:","text":"<pre><code>    options:[\n      {\n        \"id\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"type\": \"SELECT\",\n        \"options\": {\n          1 : \"Option to Select 1\",\n          2 : \"Option to Select 2\",\n          3 : \"etc.\"\n        }\n      }\n    ]\n</code></pre>"},{"location":"create-blocks/#4-the-code","title":"4. The Code:","text":"The One and the only part that do something in your Bot. All above is just to show it in the DBB Editor right. For this Stuff you need some knowledge in Javascript. You can do mostly anything here. DBB always await the end of the Function to execute Block by Block. You only can controll where the Flow goes on. ```javascript <pre><code>    code(cache) {\n      ...\n    }\n</code></pre>"},{"location":"create-blocks/#the-cache-object","title":"The <code>cache</code> Object","text":"The <code>cache</code> Object includes the information arround the Block. Without this the <code>code</code> can't interact with the lines. You only need it for the included functions from this. Example: <pre><code>  {\n    \"workspace\": \"\",\n    \"name\": \"\",\n    \"index\": \"\",\n    \"inputs\": {},\n    \"options\": {},\n    \"outputs\": {}\n  }\n</code></pre> <code>name</code> is the Block Name itself. <code>index</code> is the Number of the Block (out of DBB-Editor). <code>workspace</code> is a Number what it mean.... <code>inputs</code> is the Array of your Input lines (only the ID's of the Line gets here). <code>outputs</code> is an Array of your Output Lines (only the ID's too)."},{"location":"create-blocks/#the-this-object","title":"The <code>this</code> Object","text":"The <code>this</code> Object includes all active Blocks (you don't need this) and some usefull Functions for you. <pre><code>  // Usefull stuff for you!!\n  this.GetInputValue(\"id\", cache);\n  this.GetOptionValue(\"id\", cache);\n  this.StoreOutputValue(object, \"id\", cache);\n  this.RunNextBlock(\"id\", cache);\n  await this.require(\"npmmodul\");\n  // Just ignore anything else ;)\n</code></pre> With this functions you can get or store the Input-, Option- and Output values or run the next Block. (with the right function) For Example here is the code Block from the Print Action. <pre><code>  code(cache) {\n    const content = this.GetInputValue(\"value\", cache);\n\n    console.log(content);\n\n    this.RunNextBlock(\"action\", cache);\n  }\n</code></pre> <code>\"value\"</code> in <code>this.GetInputValue()</code> is defined in the <code>inputs</code> part of the Block. Its the same with <code>this.StoreOutputValue()</code>. It only can be use for Output Lines! Input Object from Block: <pre><code>    inputs: [\n        {\n            \"id\": \"action\",\n            \"name\": \"Action\",\n            \"description\": \"Acceptable Types: Action\\n\\nDescription: Executes this block.\",\n            \"types\": [\"action\"]\n        },\n        {\n            \"id\": \"value\",\n            \"name\": \"Value\",\n            \"description\": \"Acceptable Types: Unspecified, Undefined, Null, Object, Boolean, Number, Text, List\\n\\nDescription: The value that you want to send to your console.\",\n            \"types\": [\"unspecified\", \"undefined\", \"null\", \"object\", \"boolean\", \"number\", \"text\", \"list\"]\n        }\n    ]\n</code></pre> <code>\"action\"</code> in <code>this.RunNextBlock()</code> is defined in the <code>outputs</code> part of the Block. Output Object from Block: <pre><code>    outputs: [\n      {\n        \"id\": \"action\",\n        \"name\": \"Action\",\n        \"description\": \"Type: Action\\n\\nDescription: Executes blocks.\",\n        \"types\": [\"action\"]\n      }\n    ]\n</code></pre>"},{"location":"create-blocks/#module-loading-with-thisrequire","title":"Module loading with <code>this.require()</code>","text":"If you want to import an Module like <code>fs</code> or <code>path</code> that aren't downloaded from npm, simply use it like anywhere else, just put it inside the <code>code</code> field: Example: <pre><code>    async code(cache) {\n      const path = await require(\"path\");\n      // and go on like you wan't...\n    }\n</code></pre> If you want to import an Module like <code>discord.js</code> from npm please use <code>this.require()</code> like this: Example: <pre><code>    async code(cache) {\n      const discord = await this.require(\"discord.js\");\n      // and go on :)\n    }\n</code></pre> <p>To improve Performance you should only use default Packages and if you need another, try to use a minimal libary of this function.</p>"},{"location":"embeds/","title":"Embeds","text":""},{"location":"embeds/#embeds","title":"Embeds","text":"<p>This Section will Explain how to Create a Message embed, and also send that Embed.</p> This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods"},{"location":"embeds/#setup-the-workspace","title":"Setup the Workspace","text":"First of all you will need to use the <code>Create Message Embed</code> Block, to create the Embed with the Text that you want to send. After that you will need to use a block that sends a Message, that may be a Interaction Reply, or just a Message in a Channel. (Note: If you send a Embed, Text Input is not Needed)"},{"location":"embeds/#running-in-discord","title":"Running in Discord","text":"After you Start your Bot, just run the command you setup and your Embed should appear."},{"location":"embeds/#adding-text-from-the-command","title":"Adding Text from the Command","text":"If you want to get Text from the Command, or combine text from another place, it's really easy. For that we use the <code>Merge Texts (Advanced)</code> Block."},{"location":"embeds/#editing-embeds","title":"Editing Embeds","text":"Editing Embeds is a kinda hard Task if you don't know which Blocks you need to use. Here is a still simple example how to do it, safely. At the Top it shows the Command Example from above and at the end of it, is now added a <code>Control Data</code> Block. This Blocks Saves the Message ID for editing the Embed later. The Bottom Part shows a <code>!editembed</code> Command where first it gets the Message ID we saved earlier using <code>Get Data</code>, then finds the Message using <code>Find Message</code>(Make sure to connect a Channel), then gets the Embeds and then gets the first one using <code>Get Item from List</code>. You can then edit the Embed using <code>Edit Message Embed</code>(For this Tutorial there was a fixed version, use the best one for you) and then edit the Message using <code>Edit Message</code>(Make sure to connect the Message from the Find Message Block, and not from the Command). In Discord it looks like this!"},{"location":"gettingstarted/","title":"Getting Started","text":""},{"location":"gettingstarted/#getting-started","title":"Getting Started","text":"<p>This section will explain how to install NodeJS, setup a Bot Project within DBB as well as create and invite your Discord Bot!  </p> 1. Preparation2. Creating a Project3. Creating a Discord Bot4. Extras (Recommended)Other Important Stuff Installing Node.js <p>In order to allow your bot to run, you will need to install Node.js:</p> Installing on Windows <ul> <li>Click here to download the installer for the LTS version of Node.js.</li> <li>Follow the installer's instructions</li> </ul> Installing on Ubuntu via CLI <ul> <li>Copy these commands using the copy button in the top right hand corner of the box and paste them into your command line. <pre><code>curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\nsource ~/.bashrc\nnvm install v22\n</code></pre></li> </ul> Create Your First Project <ol> <li>Start DBB. You will be greeted with this screen:</li> </ol> 2, Click on Create New Project. You should now have this screen: <p></p> <p>After these Steps, you now have a Temporary Project opened in which you can start creating your Bot.</p> <p>To Make sure that you progress is not lost after a restart, you can save your Project by clicking on the <code>Save</code> Button in the Top Left Corner in the <code>Project</code> Menu.</p> <p></p> <p>Then, a Window Pops up in which you can go into the Folder you want to the Save the Project in and then also set a Project Folder name. After that you can click on <code>Save</code>.</p> <p></p> Create a New Bot Account and Set it Up in DBB Go to the Discord Developer Portal and do the following things: <ol> <li>Create a New Application with the name of your Choice </li> <li>Go to \"Bot\", and click \"Add Bot\" </li> <li>After that you go down and enable the 3 \"Privileged Gateway Intents\" </li> <li>Disable Public bot, to make the bot only inviteable via the URL </li> <li>Copy the Bot Token and save it for later...  (Note: MAKE SURE TO KEEP THE TOKEN SECRET AT ALL TIMES! IF SOMEBODY GETS THE BOT TOKEN, THEY CAN ACCESS AND ABUSE YOUR BOT!) </li> </ol> <p>  Input it into DBB. Do this by selecting the Bot menu in the toolbar at the top of the screen and selecting Set Bot Token. Then paste the token and hit Enter or click OK.</p> <p> </p> <p>Now you need to invite the bot to your server. You can get a Link by Going into the Discord Developer Portal, selecting your Application, going to OAuth2, and then selecting the <code>bot</code> and <code>application.commands</code>(Slash Commands) scope. After that you can select the permissions you want to give the bot and then copy the link.</p> <p> </p> Image Description Open the invite link and select your server. Adjust the bot's permissions and click Authorize. Complete reCAPTCHA and verify the invitation. That means you're all set and the bot's now in your server. Installing Mods <p>Installing Mods is really important for DBB, cause all the Docs Pages rely on the Mods, since they work the best and provide the best features!  </p> <p>One Click Install  </p> Set Intents <p>DBB comes with a Problem by not setting all Privileged Intents of Discord by Default, to change that you need to do the following:</p> <p></p> <p></p>Don't Forget to change your Intents on the Discord Developer Portal <p></p> <p>Important</p> <p>Without an event, your command will never work! Events are the only blocks that have no \"Action Connection\" input since they get triggered by the bot itself.</p> Variable Types <p></p> <p>The line types must match to connect two blocks.</p> <p>On the Output side of the block, there can be as many connections to one point as you like (except on the action type).</p> <p>On the Input side of the block, there can always only be one connection per point.</p> Good to know <p>Server = Guild</p> <p>User \u2260 Member</p> <p>A member is a user that is relevant to the guild only. You can execute actions to do with a specific server with a member.</p>"},{"location":"host-bot-24-7/","title":"Host Bot 24/7","text":""},{"location":"host-bot-24-7/#host-bot-247","title":"Host Bot 24/7","text":"<p>You have the Option to host your Bot on your own Home Server, on a Monthly Payed Rootserver/VPS or a special Bot Hosting. Here, we will go through all these ways!  </p> Rootserver/VPS (LINUX)Bot Hosting Service (Pterodactyl) <p></p> Host on Rootserver/VPS with Root Access (LINUX)  <ol> <li> <p>Log into your Rootserver/VPS using a Root Account, then start by Installing Node.JS (If not installed already). </p><pre><code>curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\nsource ~/.bashrc\nnvm install v22\n</code></pre> </li> <li> <p>Create a new Folder for your Bot and navigate into it. It's recommend that you use a Folder like <code>/home</code> for your Bot </p><pre><code>cd /home # To get into the Home Directory\nmkdir MySpecialBot # To create a new Folder\ncd MySpecialBot # To navigate into the Folder\n</code></pre> </li> <li> <p>Upload your Bot Files into the Folder you just created.  </p> <ul> <li>Use a (S)FTP Client of your choice to upload the Files, for example WinSCP or FileZilla work great.  </li> <li>Create a New Connection with the IP/Domain of your Server, Username(root) and Password.  </li> <li>Navigate to the Folder you just created and Drag-and-Drop the Files into it.   Here is a list of things you need to Upload, leave everything else away. NOTE: Upload the Full Blocks Folder! <pre><code>\u251c\u2500\u2500 blocks/  \n\u2502   \u251c\u2500\u2500 block1.js  \n\u2502   \u251c\u2500\u2500 block2.js  \n\u2502   \u2514\u2500\u2500 etc...  \n\u251c\u2500\u2500 data/  \n\u2502   \u251c\u2500\u2500 data.json  \n\u2502   \u251c\u2500\u2500 INTENTS.txt  \n\u2502   \u251c\u2500\u2500 token.txt  \n\u2502   \u2514\u2500\u2500 workspaces.json  \n\u251c\u2500\u2500 bot.js  \n\u2514\u2500\u2500 package.json  \n</code></pre></li> </ul> </li> <li> <p>Run the Bot using the following Command:   </p><pre><code>node bot.js\n</code></pre>   This will start the Bot and you should see the Bot Online in your Discord Server. </li> <li> <p>Optional, to run the Bot 24/7, using Screen   </p><pre><code>screen -S BotName node bot.js\n</code></pre>   This will start the Bot in a Screen Session, to detach from the Screen use <code>CTRL+A</code> and then <code>CTRL+D</code>. To reattach use <code>screen -x BotName</code>. </li> </ol> <p></p> Host on a Bot Hosting Service (Pterodactyl)  <p>You should find your Server on the Dashboard looking like this: </p> Now you have two Options on how to Upload your Files: ZIP-File Way Note: Supports <code>.rar</code> &amp; <code>.tar.gz</code>   - Create a Zip File including the files of your Project. <pre><code>\u251c\u2500\u2500 blocks/  \n\u2502   \u251c\u2500\u2500 block1.js  \n\u2502   \u251c\u2500\u2500 block2.js  \n\u2502   \u2514\u2500\u2500 etc...  \n\u251c\u2500\u2500 data/  \n\u2502   \u251c\u2500\u2500 data.json  \n\u2502   \u251c\u2500\u2500 INTENTS.txt  \n\u2502   \u251c\u2500\u2500 token.txt  \n\u2502   \u2514\u2500\u2500 workspaces.json  \n\u251c\u2500\u2500 bot.js  \n\u2514\u2500\u2500 package.json  \n</code></pre>   - Upload the File to the Server in the \"Files\" Tab of the Panel Dashboard Website   - Next to the ZIP File click the 3 Points, and there press \"Unarchive\"   - Delete the ZIP once finished (OPTIONAL)   SFTP Way Note: Requires WinSCP to be Installed   - On Your Server, go to \"Settings\"   - There click on \"Launch SFTP\"   - Then a Window Pops-Up asking you for a password, enter your Dashboard Account Password and click \"OK\"   - Once connected, Upload your Bot Files to the \"/\" Directory of the Server."},{"location":"how-to-use/","title":"How to use DBB","text":""},{"location":"how-to-use/#how-to-use-dbb","title":"How to use DBB","text":""},{"location":"how-to-use/#create-a-project","title":"Create a Project","text":"Either on the Start Page Or In the Toolbar"},{"location":"how-to-use/#switch-workspaces","title":"Switch Workspaces","text":"<p>Workspaces are important parts of making a Bot, as they allow you to split parts of the Bot to make it visually more appealing and easier to find things you created.  </p> <p></p>"},{"location":"how-to-use/#manage-workspaces","title":"Manage Workspaces","text":"<p>You can manage any Workspace, by using your Right Mouse Click Button on a Workspace in the left Sidebar. That opens a Editor View like a User Profile on Discord.</p> <p>This allows you to change the Name, Profile Color and Banner Image. As well as setting a description/note for the workspace for when you share it.  </p> <p></p>"},{"location":"how-to-use/#handling-blocks","title":"Handling Blocks","text":"There is quite a few way to handle Blocks in DBB, here are some! <p>You can grab each Block by its Name-Bar and then drag it to where you want it.</p> <p></p> <p>You can place Blocks by right-clicking a space on the Workspace. There you can either search for the Block with the search bar at the Top. Or scroll through the Categories to find the Block you want.  </p> <p></p> <p>You can resize Blocks by pressing and holding the bottom right corner of a Block to change its size. You can also Resize by dragging the Edges of the Block to just change the Horizontal or Vertical Size.  </p> <p></p> <p>You can delete any Block by using the Del Key on your Keyboard, or using the Delete Button on the Right!</p> <p></p> <p>You can Connect Blocks with eachother by hold and dragging the Dot on the Left/Right Side of a Block to another Block. Disconnect them by pressing Del on your keyboard, or using the Delete Button on the Right.</p> <p></p> <p>You can \"mark\" a Collection of Blocks by Holding the Shift Key on your Keyboard and Holding Left Button on your Mouse while dragging a square to hold a collection of Blocks.  </p> <p>You can then Grab one Block by the Name-Bar to move the Blocks as a collection. You can use Ctrl+C and Ctrl+V to Copy and Paste the Marked Blocks.  </p> <p></p>"},{"location":"how-to-use/#move-em","title":"Move 'em","text":""},{"location":"how-to-use/#place-em","title":"Place 'em","text":""},{"location":"how-to-use/#resize-em","title":"Resize 'em","text":""},{"location":"how-to-use/#delete-em","title":"Delete 'em","text":""},{"location":"how-to-use/#dis-connect-em","title":"Dis- / Connect 'em","text":""},{"location":"how-to-use/#mark-copy-n-paste","title":"Mark - Copy 'n Paste","text":""},{"location":"how-to-use/#organizing-workspaces","title":"Organizing Workspaces","text":"<p>You can create Categories in Your Workspace List to organize the way they are ordered.  </p> <p></p> <p>You can create Note Blocks that are behind your Blocks to oranize specific collections/parts of your Workspace. These can be found in the Block List Menu when you Right Click your Workspace, and then press the green <code>Create Note</code> Button.  </p> <p></p> <p>You can change their Color, Size, Name and Description using the Right Toolbar.</p> <p></p>"},{"location":"how-to-use/#create-and-manage-categories","title":"Create and Manage Categories","text":""},{"location":"how-to-use/#create-notes","title":"Create Notes","text":""},{"location":"how-to-use/#edit-notes","title":"Edit Notes","text":""},{"location":"modals/","title":"Modals","text":""},{"location":"modals/#modals","title":"Modals","text":"<p>This Section will explain how setup a Modal, and show that to the User and also fetch what the User Inputed into the Modal.</p> This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods"},{"location":"modals/#setup-modal","title":"Setup Modal","text":"<p>Important</p> <ul> <li>To be able to receive a Modal, a normal Prefix Command is not working, you will need some kind of Interaction. </li> </ul> This can be a Slash command, Button or Select Menu.   <p>After the <code>Interaction [Event]</code> Block we will use the <code>Create Modal Input Field</code> Block to create Text Inputs for the Modal, you can customize these to your liking.  </p> <p>After that, add each Input Field Object to a List that you create using the <code>Create List</code> Block and add them using the <code>Add Item to List</code> Block.  </p> <p>After all that you use the <code>Create and Show Modal</code> Block to finish the Modal and show it to the User.  </p> <p>(Defering or Replying to the Interaction is not needed right now, but later...)  </p> <p></p>"},{"location":"modals/#reacting-to-the-modal","title":"Reacting to the Modal","text":"<p>You just use the <code>Interaction [Event]</code> again, set it to Modal, and enter CustomID of the Modal.  </p> <p>Then use the <code>Get Modal Argument by Name</code> to get both Field Inputs, and use them as you like. In this Example we will add them together using <code>Merge Texts (Advanced)</code>.  </p> <p>After that Reply to the Interaction to tell the User that we received the Input!  </p> <p></p>"},{"location":"modals/#testing-in-discord","title":"Testing in Discord","text":""},{"location":"mods/","title":"Installing Mods","text":""},{"location":"mods/#installing-mods","title":"Installing Mods","text":"<p>Installing Mods is pretty Straight forward... Press a Button in DBB, Paste a URL, Wait.. and Done!</p> One Click WaySemi-Automatic WayManual Way"},{"location":"mods/#click-here-to-install","title":"Click Here to Install","text":"This new Installation Way was added by DBB and allows you to just click on Button to install all Modded Blocks.   One Click Install"},{"location":"mods/#installing","title":"Installing","text":"As of v1 you can now download and install Modded Blocks in DBB.   For that you go to the <code>Bot</code> Tab and there hover over <code>Import Blocks</code> and then click on <code>Download Blocks</code>,  For Modded Blocks you can use the following URL: <pre><code>https://blocks.dbb.software/download/all\n</code></pre> there you paste the URL from the Download Button at the Top of this Page and then click <code>Download</code>."},{"location":"mods/#downloading","title":"Downloading","text":"You need to Download the blocks from the <code>currently</code> official DBB Block Storage Website. Download All Blocks  Storage Server"},{"location":"mods/#dragging-into-the-blocks-folder","title":"Dragging into the Blocks Folder","text":"After Downloading the ZIP File of all the Blocks or just one Block file, you need to open your Project folder and then Drag the Block file into the Blocks folder. The ZIP file has to be extracted into the Blocks Folder."},{"location":"musicplayer/","title":"Music Blocks","text":""},{"location":"musicplayer/#music-blocks","title":"Music Blocks","text":"This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods   Play Music in Voice Channel  <p>Playing Music is really easy, and doesn't take a lot of Blocks... Here is a Simple Example:</p> <p></p>  Setup Slash Command Autocomplete  <p>Below is an example of how to enable Auto Complete on a slash command: </p> <p></p>"},{"location":"select/","title":"Select Menu","text":""},{"location":"select/#select-menus","title":"Select Menus","text":"<p>This Section will explain how to create and use Select Menus.</p> This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods  String Select MenuUser Select Menu  String Select Menu  <p>A String Select Menu, is the default Menu that can have anything selectable with Text, emojis and a Description. Here is a Example for a Select Menu!  </p>  Creating the Select Menu  <p>This will create 3 Select Menu Options and each will be connected with one Select Menu, to get Send with a Message.  </p> <p> </p>  Reacting to the Select Menu  <p>The Select Menu uses the Interaction Event when used. The <code>Menu Option Value</code> has to include the Value of your single option which needs to be selected for this Action to run, and also set the CustomID of the Select Menu in the <code>Name / ID</code>.  </p> <p>Now you can use the Individual <code>Interaction [Event]</code> Blocks to handle the Select Menu Interaction Values, you can Update the Interaction by using <code>Interaction Update</code> and connect <code>Interaction</code> and <code>Text</code> to it. Optionally you can use <code>Merge Texts (Advanced)</code> to combine the Name of the Menu Option with other Text. </p> <p> </p>  Testing in Discord  <p>After you run your Bot you should be able to see your Menu using the Command of your choice. Once you select something, the bot should return a Message or whatever you set!</p> <p> </p>  User Select Menu  <p>The User Select Menu is, again, much easier then the String Select Menu. You just need one Block to create it!  </p>  Creating the Select Menu  <p>Use a Command, then create your Select Menu, then send that Menu. It can't get any simpler than that!  </p> <p> </p>  Reacting to the Select Menu  <p>Then use the <code>Interaction Event</code>, in Combination with <code>Get Item from List</code> to get the User. Then Get the Information you need about the User and Reply back to the Interaction. </p> <p></p>  Testing in Discord  <p>After you run your Bot, just use the Command and Interact with the Select Menu, then it should work...</p> <p></p>"},{"location":"slash-command-builder/","title":"Slash Command Builder","text":""},{"location":"slash-command-builder/#slash-command-builder","title":"Slash Command Builder","text":"<p>Enter Fullscreen</p>"},{"location":"slash-commands/","title":"Slash Commands","text":""},{"location":"slash-commands/#slash-commands","title":"Slash Commands","text":"<p>This Section will explain how to Create, Setup and Use Slash Commands.</p> This Page explains using Mods! This Page includes Content using Community Created Mods and may vary from your experience! Go to Documentation page for Mods  1. Slash Commands Startup2. Handling InteractionsMaking SubcommandsUser Installable Commands <p>To start using Slash Commands, you have to create a Slash Command Structure/Interface in Developer Terms. This Structure tells Discord how to display the Command with which texts and which options. This Step is required for Discord to know that you want to handle this command as a Interaction.</p> 1.1. Create Commands1.2. Copy Command Code1.3. Add Commands to DBB <p>First go to the Slash Commands Builder and Create a command of your Choice. In this example we will create a Kick and Timeout Command: </p> <p>After your created your Command on the left Side of the Screen, you click the <code>Copy Slash Commands (without [])</code> Button to Copy it in a Format that DBB can Read  </p> <p> </p> <p>After this, Continue to the Next Step </p> <p>Important to know!</p> <ul> <li>You can add multiple Commands by using <code>,</code> to split the commands</li> </ul> <p></p> <p>For each Slash Command or other Button, Modal, Select Menu or Context Menu Interaction there needs to be a so called handler. This Handler catches/detects when one of those interactions was used and then you as the builder can decide what happens when it was used. Thats also the reason why it is important that Buttons have a CustomID, to differenciate which specific button was used.  </p> 2.1. Kick Command2.2. Timeout Command2.3. Testing the Finished Product <p>First we Build the Kick Command Handler. For that we use the Interaction Event Block. Next we use the Get Interaction Argument by Name to get the Member and Reason. Next we use the <code>Kick Member</code> Block and connect everything. Optionally you can use the <code>Merge Texts [Advanced]</code> Block to add the Mention of the Mmeber to a Message, you can reply to the Interaction using <code>Reply to Interaction</code>. </p> <p>Next we will build the Timeout Command Handler. For that we again use the Interaction Event Block. Next again use the Get Interaction Argument by Name Block to get the Member and the Time Number in Minutes. After that we use the <code>Timeout Member</code> Block and add the Rest of the Optional Stuff if needed. </p> <p>After you start your Bot the Command(s) should be available in Discord! </p> <p>Subcommands are not much different from natural Slash Commands and even work the same way... There are just some changes to the normal way.  </p> Building the SubcommandManaging Subcommands in DBB <p>On the Slash Commands Builder you can first setup a main command Name and then for the Argument Type there are two options... Either you select <code>Subcommand Group</code>, which allows to setup multiple Subcommands within that group. Or you select <code>Subcommand</code> and you can have just a simple subcommand or multiple subcommands for that one command... In this example we are going to create a Subcommand Group with 2 Subcommands and a Subcommand.</p> <p> </p> <p>This Example includes a Echo Command(Which Repeats the Users Specified Text) and a <code>messages</code> Subcommand Group, with a delete_amount Subcommand and del_msg Subcommand. Both Commands will have different functions within one main Command called <code>tools</code>.  </p> <p>After you are done building the Command, you can click <code>View Code</code> and Copy the JSON like above.  </p> The Command Code <pre><code>{\n    \"name\": \"tools\",\n    \"description\": \"Manage Bot Tools\",\n    \"options\": [\n        {\n            \"type\": 2,\n            \"name\": \"messages\",\n            \"description\": \"Manage the Messages\",\n            \"options\": [\n                {\n                    \"type\": 1,\n                    \"name\": \"delete_amount\",\n                    \"description\": \"Delete a Amount of Messages\",\n                    \"options\": [\n                        {\n                            \"type\": 10,\n                            \"name\": \"amount\",\n                            \"description\": \"The Amount of Messages to Delete\",\n                            \"required\": true\n                        }\n                    ]\n                },\n                {\n                    \"type\": 1,\n                    \"name\": \"del_msg\",\n                    \"description\": \"Delete a Specifc Message by ID\",\n                    \"options\": [\n                        {\n                            \"type\": 3,\n                            \"name\": \"msgid\",\n                            \"description\": \"The Messages ID you want to delete\",\n                            \"required\": true\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": 1,\n            \"name\": \"echo\",\n            \"description\": \"Let the bot repeat a Message\",\n            \"options\": [\n                {\n                    \"type\": 3,\n                    \"name\": \"msg\",\n                    \"description\": \"The Message you want the bot to say\",\n                    \"required\": true\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>After that you paste it into your <code>Register Slash Commands</code> Block and then we continue with...</p> <p>Subcommands are quite similar like Normal Slashcommands but need some special treatments.</p> <p></p> <p>As you can see it looks really complicated at first glance, but if you ignore all connections it's pretty understandable. First we start with a <code>Interaction [Event]</code> Block and then use <code>Check if Value Exists</code> to detect if a Subcommand Group was used or not(This is not required if not using <code>Subcommand Groups</code>)... </p> <p>If True, we check the Subcommand using <code>Switch (conditional)</code>(As the Input you set <code>Subcommand Name</code> from the <code>Interaction Event</code>), the rest after that can be customized to your liking.</p> <p>If False, we make the same check, in this case there is only one subcommand in the Main command, so we Just use the same stuff we would use in a normal Slash Command.</p> <p>I hope this explained Subcommands a bit, it may be hard at first but you'll get into it... Ask around for help on the DBB Discord if you encounter issues.</p> <p>With the Latest Discord Update, Slash Commands can be used installable and used across DMs and Discord Servers. Important to know is that these Command Interactions usually don't include that much informations like normal Bot Slash Commands cause they happen in Scenarios where the bot is not allowed to look into.</p> <p>To make these commands you need to add the following Informations to your Slash Commands Structure:</p> <p></p><pre><code>{\n    // ...Other Stuff...\n    \"description\": \"Your Slash command description whatever\",\n    \"integration_types\": [0, 1], // (1)\n    \"contexts\": [0, 1, 2], // (2)\n    // ...Other Stuff...\n}\n</code></pre> <ol> <li>Installation contexts where the command is available, only for globally-scoped commands. Defaults to your app's configured contexts.     This can be:         GUILD_INSTALL = 0   -&gt; App is installable to servers         USER_INSTALL = 1   -&gt; App is installable to users  </li> <li> <p>Interaction context(s) where the command can be used, only for globally-scoped commands. By default, all interaction context types included for new commands.     This can be:  </p> <p>GUILD = 0 Interaction can be used within servers  </p> <p>BOT_DM = 1 Interaction can be used within DMs with the app's bot user  </p> <p>PRIVATE_CHANNEL = 2 Interaction can be used within Group DMs and DMs other than the app's bot user  </p> </li> </ol> <p>Click the PLUS Icon next to the code to understand what these lines mean.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>Issues are normal in DBB, since mostly everything is made by the community, but sometimes it's just the users fault. Try following these steps if you have issues!</p> An Always Fix <p>If you encouter some weird issue that was not documented and happens with some block or anything just try this fix to get it working...</p> <p>Make sure your Bot is Not Running while following these Steps...</p> <p>Remove the <code>node_modules</code> folder and <code>package-lock.json</code> file in your Project folder, then run <code>npm cache clean --force</code> in a Terminal/CMD that is navigated to the Bot Folder and then start your Bot.</p> Error: Used Disallowed Intents Big Error: While installing discordjs/opus DBB Error: Command failed: node -v Cannot read properties of undefined (reading \"...\")"},{"location":"troubleshooting/#error-used-disallowed-intents","title":"Error: Used Disallowed Intents","text":"<p>This error occurs when the users forgets to allow the bot to use all Intents on the Discord Developer Portal of your Application/Bot.</p> <p></p>"},{"location":"troubleshooting/#big-error-while-installing-discordjsopus","title":"Big Error: While installing discordjs/opus","text":"<p>Update: discordjs/opus isn't being used anymore, please update your Blocks if you still encounter this issue.  </p> <p>This error occurs when the wrong NodeJS Version was installed, make sure you installed v18 and depending on your OS 64x for Windows.</p>"},{"location":"troubleshooting/#dbb-error-command-failed-node-v","title":"DBB Error: Command failed: node -v","text":"<p>This error occurs when NodeJS was not detected, please make sure you installed NodeJS Correctly! If you already installed it and it still occurs, please restart your PC.</p> <p>If you, for whatever reason, can't restart your PC, there is a <code>Start Bot.bat</code> file in your Project folder that can start the bot!</p>"},{"location":"troubleshooting/#cannot-read-properties-of-undefined-reading","title":"Cannot read properties of undefined (reading \"...\")","text":"<p>In this case it means that you connected something to a block that was not found or was not specified, or sometimes even nothing connected at all. Incase you use any \"Find\" Block, make sure to use IDs to find things, don't rely on using Names. If there is no way around using names, check if the name is written correctly.</p>"},{"location":"troubleshooting/#any-errors","title":"Any Errors","text":"If any other Error appears always read the error fully, search for the mentioned block and look what you connected to the Block or selected in it..."},{"location":"troubleshooting/#final-note","title":"Final Note","text":"If your problem was not listed here or you have issues fixing it you can always join our Discord Server"},{"location":"videos/","title":"Videos","text":""},{"location":"videos/#tutorial-videos","title":"Tutorial Videos","text":"<p>This Section has Videos that were made by the Community of DBB!</p>  DBB v1 Videos  <p>Videos that are for the newest Version of DBB and Discord.JS v14!</p> Starting with DBB v1 and Interactions <p></p>"},{"location":"workspaces/","title":"Share/Import Workspace","text":""},{"location":"workspaces/#adding-workspaces","title":"Adding Workspaces","text":"<p>This Part will Explain how to install/add Workspaces from our Discord Server.</p> ImportingExporting WrittenVideo In the Workspaces Channel on the DBB Discord, there you can find a txt file with the JSON Code for the Workspace. <ul> <li>Download the <code>.txt</code> file</li> <li>Copy the contents of the file</li> <li>Open DBB, load a project, create a new Workspace and right click it</li> <li>Then Press the Cyan Colored Paste Button</li> <li>Press <code>Paste</code> on the Warning that pops up</li> <li>Done, you have now added a Workspace to your Project!</li> </ul> <p>(Note: You may need Custom Modded Blocks that should be mentioned in the Thread)</p> <p></p> <p>Video Tutorial</p> <p></p> Written <p>In DBB, Right Click a Workspace in your Workspaces List on the left, and then Press the GREEN Copy Button to Copy the Raw JSON Content of the Workspace.</p> <p>This can then be pasted into a Discord Chat (Using CTRL+V or German Layout STRG+V) and this way be shared!</p> <p></p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/09/03/first-blog-post/","title":"First Blog Post!","text":""},{"location":"blog/2023/09/03/first-blog-post/#first-blog-post","title":"First Blog Post!","text":"<p>If you have found this Blog Post, then you like the Documentations... Thanks for Visting this...</p> <p>This Blog will continue to grow the more things change on here...</p> <p>You can always Contribute to here incase you didn't know, you can DM me using <code>xcrafttm</code>.</p>"},{"location":"blog/2023/09/05/update-1/","title":"Update 1","text":""},{"location":"blog/2023/09/05/update-1/#update-1","title":"Update 1","text":"<p>The Docs get better each time i touch them, actually really great! </p> <p>You can read more about the Changes that i made to the Docs by clicking on the <code>Continue Reading</code> Button at the Bottom of the Post</p>"},{"location":"blog/2023/09/05/update-1/#analytics","title":"Analytics","text":"<p>I am now collecting anonymous user statistics, to improve the quality of the website and see how well the Website performs. You will be able to choose if you want to contribute to that data using the Cookies features that was added.</p>"},{"location":"blog/2023/09/05/update-1/#cookies","title":"Cookies","text":"<p>Now we come to another Part, that can be kinda tricky for some people, but this needs to be added to avoid any legel issues. You can disable your cookies for Github or Analytics via the <code>Manage Cookies</code> Button, you can edit your decision at the bottom of the Page at any Time!</p>"},{"location":"blog/2023/09/05/update-1/#github-comments","title":"Github Comments","text":"<p>As you might have noticed, some Pages like Slash Commands now have a Comments Part of the Bottom of the Page. You can login using your GitHub Account and write suggestions or just Simple feedback.</p>"},{"location":"blog/2023/09/05/update-1/#was-this-page-helpful","title":"Was this page helpful?","text":"<p>Also above the Comments there is a new Feature with that you can tell me anonymously if you liked the Page you were reading or not...</p>"},{"location":"blog/2023/10/14/update-2/","title":"Update 2","text":""},{"location":"blog/2023/10/14/update-2/#update-2","title":"Update 2","text":"<p>NEW BASIC ACTIONS PAGE</p> <p>Today i am releasing a new Page including some basic actions that some people might not know about. The Page will be expanded the more Stuff i find that people don't know about.</p>"},{"location":"blog/2023/10/14/update-2/#how-to-dm-people","title":"How to DM People","text":"<p>The Page currently includes a Guide how to correctly DM a user and a Warning...</p> <p>I am really hoping to add more content Soon!</p>"},{"location":"blog/2023/11/05/update-3/","title":"Update 3","text":""},{"location":"blog/2023/11/05/update-3/#update-3","title":"Update 3","text":"<p>Troubleshooting Page Overhaul</p> <p>We have got a new Troubleshooting Page! Today i got some time to change the trobuleshooting tips to be in a clickable container.</p>"},{"location":"blog/2024/01/03/update-4/","title":"Update 4","text":"Docs Overhaul <p>XCraftTM and Myself have been working on a major overhaul across the entire site,  improving the layout and readabilty, hopefully making your experience more enjoyable.</p> Slash Command Builder Overhaul <p>As apart of this re-work, I have also completed an overhaul of the  slash command builder that was previously embeded within the docs, improving the finctionality and apperance,  allowing you to now create your slash commands from the official documents themselves.</p> Provide Feedback <p>If you have any feedback, please do: - leave a comment OR - ping @\u200eBeastlybear2017 in the 'general' channel of the DBB Discord Server :)</p>"},{"location":"blog/2024/09/24/update-5/","title":"Update 5","text":"Buttons Page Update <p>I have taken the time to Update the Buttons Page to use the newest Blocks instead of the old ones Also i got rid of the Prefix Commands, since they suck anyways.</p> Documentation keeps getting Better <p>I am trying my best to make these Documentations as easy to read and understand as possible So i mostly rely on you guys to provide me some feedback on what i should change to make it easier for you!</p>"},{"location":"blog/2024/12/31/update-6/","title":"Update 6","text":"Big Overhaul of the Documentation <p>I have overhauled the hosting of the Images for the Documentations And also we now have a new Slash Commands Documentation, now including the User-Installable Commands.</p> About the new Images <p>A few people from countries like Russia or further had issues reading the images  that are displayed on the Documentation cause they were hosted on Imgur, which is blocked in those regions.</p> <p>With that i have now changed that so the images now are on the GitHub Repo to be able to see them properly.</p> New Slash Commands Page <p>I have also Overhauled the Slash Commands Page to make it a bit easier to understand and find what you are looking for.</p> <p>Now the Pages and steps are split into individual Content Tabs which makes it a bit easier to read.</p> Hoping for your Feedback <p>If you have some ideas for the Documentation or other things that you would like changed, be sure to reach out to me! (@XCraftTM on Discord)</p> <p>Happy New Year 2025</p>"},{"location":"blog/2025/01/03/update-7/","title":"Update 7","text":"New Slash Command Builder <p>The Slash Command JSON Builder was remade by me (@XCraftTM) and it now available to use!</p> About the Slash Command Builder <p>This new Slash Command Builder is now using a Combination of NextUI, NextJS and React.</p> <p>Meaning it will now run a lot faster and better!</p> <p>You can also now put your Code on the right into the Code-Editor and instantly edit it on the left.</p> If Errors Occur... <p>... Be sure to report them to me on Discord, that will make sure i can fix them asap if something doesn't work.</p> Happy New Year <p>I wish everyone of you guys a happy new year 2025 and Hope everyone got some nice Gifts on Christmas with which everyone is happy.</p>"},{"location":"blog/2025/03/10/update-8/","title":"Update 8","text":"New Block Storage Launch <p>I am Happy to announce that we now have a New Block Storage! This new Block Storage allows your to Easily Upload, Manage and Share your Block Creations. I worked pretty Long on this New Creation and Hope you all enjoy it!  </p> Docs Page Updated <p>I updated the Slash Commands Section for the New Interaction Blocks to make it understandable.</p> Blocks Updated <p>A Lot of the Modded Blocks were Updated and fixed. But the blocks were not only Fixed, but adjusted to use the new Dynamic IO-Functions that DBB Provides now!</p>"}]}